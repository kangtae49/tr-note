
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getAppDir() : Promise<Result<string, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_app_dir") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async runHttpServer(servInfo: ServInfo) : Promise<Result<ServInfo, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("run_http_server", { servInfo }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async shutdownHttpServer(id: string) : Promise<Result<null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("shutdown_http_server", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadFavorite() : Promise<Result<FavoriteJson, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_favorite") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveFavorite(json: FavoriteJson) : Promise<Result<null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_favorite", { json }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async loadTab() : Promise<Result<TabJson, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("load_tab") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveTab(json: TabJson) : Promise<Result<null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_tab", { json }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveFile(filePath: string, text: string) : Promise<Result<Item, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_file", { filePath, text }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readFolder(params: OptParams) : Promise<Result<Folder, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_folder", { params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getHomeDir() : Promise<Result<Partial<{ [key in HomeType]: string }>, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_home_dir") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDisks() : Promise<Result<DiskInfo[], ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_disks") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getFileItem(path: string, metaTypes: MetaType[]) : Promise<Result<Item, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_file_item", { path, metaTypes }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deletePath(path: string) : Promise<Result<string, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_path", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async renamePath(basePath: string, oldName: string, newName: string) : Promise<Result<string, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("rename_path", { basePath, oldName, newName }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createFolder(basePath: string) : Promise<Result<string, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_folder", { basePath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createFile(basePath: string) : Promise<Result<string, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_file", { basePath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createDrawFile(basePath: string) : Promise<Result<string, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_draw_file", { basePath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type ApiError = { Error: string } | { TauriError: string } | { IoError: string } | { JsonError: string } | { TokioError: string } | { GlobError: string } | { WindowsError: string }
export type DiskInfo = { path: string }
export type FavoriteItem = { full_path: string; dir: boolean }
export type FavoriteJson = { items: FavoriteItem[] }
export type Folder = { item: Item; path_param: string; base_nm: string; tot?: number | null; cnt?: number | null; skip_n?: number | null; take_n?: number | null; ordering?: OrdItem[] | null }
export type HomeType = "RootDir" | "HomeDir" | "DownloadDir" | "VideoDir" | "DocumentDir" | "DesktopDir" | "PictureDir" | "AudioDir" | "ConfigDir" | "DataDir" | "DataLocalDir" | "CacheDir" | "FontDir" | "PublicDir" | "ExecutableDir" | "RuntimeDir" | "TemplateDir"
export type Item = { nm: string; dir: boolean; ext?: string | null; mt?: string | null; sz?: number | null; tm?: number | null; items?: Item[] | null }
export type MetaType = "Sz" | "Tm" | "Mt" | "Ext"
export type OptParams = { path_str?: string | null; meta_types?: MetaType[] | null; ordering?: OrdItem[] | null; skip_n?: number | null; take_n?: number | null; is_pretty?: boolean | null; cache_nm?: string | null }
export type OrdItem = { nm: OrderBy; asc: OrderAsc }
export type OrderAsc = "Asc" | "Desc"
export type OrderBy = "Dir" | "Nm" | "Sz" | "Tm" | "Mt" | "Ext"
export type ServInfo = { id: string; ip: string; port: number; path?: string | null }
export type TabItem = { full_path: string; dir: boolean }
export type TabJson = { items: TabItem[] }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
// This file has been generated by Specta. DO NOT EDIT.

export type HttpCmd = "Refresh"

export type HttpNotify = { cmd: HttpCmd; param?: string | null }

